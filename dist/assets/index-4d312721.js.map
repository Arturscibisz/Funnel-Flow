{"version":3,"file":"index-4d312721.js","sources":["../../js/supabase.js","../../js/auth.js","../../script.js"],"sourcesContent":["import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.38.4/+esm';\n\n// Inicjalizacja klienta Supabase\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://etlesktrdcrnxigpbqcd.supabase.co';\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV0bGVza3RyZGNybnhpZ3BicWNkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkyMjUyNjMsImV4cCI6MjA2NDgwMTI2M30.WGxo-ntVdTbUTelTpBgTB-x3Ha20OKLE0BGYwEW6L8k';\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Funkcja do sprawdzania połączenia z Supabase\nexport async function checkConnection() {\n  try {\n    const startTime = performance.now();\n    \n    // Wykonaj proste zapytanie, aby sprawdzić połączenie\n    const { data, error } = await supabase\n      .from('roles')\n      .select('count', { count: 'exact', head: true });\n    \n    const endTime = performance.now();\n    const responseTime = Math.round(endTime - startTime);\n    \n    if (error) throw error;\n    \n    return {\n      connected: true,\n      responseTime,\n      error: null\n    };\n  } catch (error) {\n    console.error('Błąd połączenia z Supabase:', error);\n    \n    return {\n      connected: false,\n      responseTime: null,\n      error: error.message\n    };\n  }\n}\n\n// Funkcja do pobierania informacji o tabelach\nexport async function getTablesInfo() {\n  // W rzeczywistej aplikacji pobierałbyś te dane z Supabase\n  // Dla celów demonstracyjnych zwracamy przykładowe dane\n  \n  return {\n    tables: [\n      { name: 'users', records: 1245, size: '2.4 MB', lastModified: '15 Maja 2025, 09:45' },\n      { name: 'campaigns', records: 856, size: '4.2 MB', lastModified: '15 Maja 2025, 10:15' },\n      { name: 'analytics', records: 15678, size: '3.8 MB', lastModified: '15 Maja 2025, 10:30' },\n      { name: 'funnels', records: 423, size: '1.2 MB', lastModified: '15 Maja 2025, 08:45' },\n      { name: 'roles', records: 5, size: '0.2 MB', lastModified: '14 Maja 2025, 14:30' }\n    ],\n    totalSize: '12.4 GB',\n    totalStorage: '20 GB',\n    usagePercentage: 62,\n    tableCount: 14,\n    recordCount: 24567\n  };\n}\n\n// Funkcja do pobierania logów systemowych\nexport function getSystemLogs(level = 'all') {\n  const now = new Date();\n  \n  const logs = [\n    {\n      time: formatDate(new Date(now.getTime() - 5 * 60 * 1000)),\n      level: 'error',\n      source: 'API',\n      message: 'Błąd połączenia z zewnętrznym serwisem płatności'\n    },\n    {\n      time: formatDate(new Date(now.getTime() - 10 * 60 * 1000)),\n      level: 'warning',\n      source: 'Baza danych',\n      message: \"Powolne zapytanie: SELECT * FROM analytics WHERE date > '2025-05-01'\"\n    },\n    {\n      time: formatDate(new Date(now.getTime() - 15 * 60 * 1000)),\n      level: 'info',\n      source: 'System',\n      message: 'Użytkownik jan.kowalski@example.com zalogował się do systemu'\n    },\n    {\n      time: formatDate(new Date(now.getTime() - 20 * 60 * 1000)),\n      level: 'info',\n      source: 'Kampanie',\n      message: 'Nowa kampania \"Letnia Promocja 2025\" została utworzona'\n    },\n    {\n      time: formatDate(new Date(now.getTime() - 25 * 60 * 1000)),\n      level: 'warning',\n      source: 'System',\n      message: 'Wykorzystanie pamięci przekroczyło 80% limitu'\n    },\n    {\n      time: formatDate(new Date(now.getTime() - 30 * 60 * 1000)),\n      level: 'error',\n      source: 'Baza danych',\n      message: 'Nie można utworzyć indeksu na tabeli analytics - brak miejsca'\n    },\n    {\n      time: formatDate(new Date(now.getTime() - 35 * 60 * 1000)),\n      level: 'info',\n      source: 'System',\n      message: 'Automatyczna kopia zapasowa została utworzona pomyślnie'\n    }\n  ];\n  \n  // Filtrowanie logów według poziomu\n  if (level !== 'all') {\n    if (level === 'error') {\n      return logs.filter(log => log.level === 'error');\n    } else if (level === 'warning') {\n      return logs.filter(log => log.level === 'error' || log.level === 'warning');\n    } else if (level === 'info') {\n      return logs; // Wszystkie poziomy\n    }\n  }\n  \n  return logs;\n}\n\n// Funkcja pomocnicza do formatowania daty\nfunction formatDate(date) {\n  const options = {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  };\n  return date.toLocaleDateString('pl-PL', options);\n}\n","import { supabase } from './supabase.js';\n\n// Funkcja do rejestracji nowego użytkownika\nexport async function registerUser(email, password, userData) {\n  try {\n    // Rejestracja użytkownika w Auth\n    const { data: authData, error: authError } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          first_name: userData.firstName,\n          last_name: userData.lastName\n        }\n      }\n    });\n\n    if (authError) throw authError;\n\n    // Tworzenie profilu użytkownika\n    const { error: profileError } = await supabase\n      .from('user_profiles')\n      .insert([\n        {\n          id: authData.user.id,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          company: userData.company || 'FunnelFlow Sp. z o.o.',\n          avatar_url: userData.avatarUrl || null\n        }\n      ]);\n\n    if (profileError) throw profileError;\n\n    // Przypisanie roli do użytkownika\n    const { data: roleData, error: roleError } = await supabase\n      .from('roles')\n      .select('id')\n      .eq('name', userData.role.toLowerCase())\n      .single();\n\n    if (roleError) throw roleError;\n\n    const { error: roleAssignError } = await supabase\n      .from('user_roles')\n      .insert([\n        {\n          user_id: authData.user.id,\n          role_id: roleData.id\n        }\n      ]);\n\n    if (roleAssignError) throw roleAssignError;\n\n    return { success: true, user: authData.user };\n  } catch (error) {\n    console.error('Błąd podczas rejestracji użytkownika:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Funkcja do logowania użytkownika\nexport async function loginUser(email, password) {\n  try {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n\n    if (error) throw error;\n\n    // Pobierz rolę użytkownika\n    const { data: userRoles, error: rolesError } = await supabase\n      .from('user_roles')\n      .select(`\n        role_id,\n        roles:role_id (\n          id,\n          name,\n          permissions\n        )\n      `)\n      .eq('user_id', data.user.id);\n\n    if (rolesError) throw rolesError;\n\n    // Pobierz profil użytkownika\n    const { data: profile, error: profileError } = await supabase\n      .from('user_profiles')\n      .select('*')\n      .eq('id', data.user.id)\n      .single();\n\n    if (profileError) throw profileError;\n\n    // Zapisz dane użytkownika w localStorage\n    const userData = {\n      id: data.user.id,\n      email: data.user.email,\n      firstName: profile.first_name,\n      lastName: profile.last_name,\n      company: profile.company,\n      avatarUrl: profile.avatar_url,\n      roles: userRoles.map(ur => ({\n        id: ur.roles.id,\n        name: ur.roles.name,\n        permissions: ur.roles.permissions\n      }))\n    };\n\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('session', JSON.stringify(data.session));\n\n    return { success: true, user: userData };\n  } catch (error) {\n    console.error('Błąd podczas logowania:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Funkcja do wylogowania użytkownika\nexport async function logoutUser() {\n  try {\n    const { error } = await supabase.auth.signOut();\n    \n    if (error) throw error;\n    \n    // Usuń dane użytkownika z localStorage\n    localStorage.removeItem('user');\n    localStorage.removeItem('session');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Błąd podczas wylogowania:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Funkcja do sprawdzania czy użytkownik jest zalogowany\nexport function getCurrentUser() {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n}\n\n// Funkcja do sprawdzania czy użytkownik ma określoną rolę\nexport function hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) return false;\n  \n  return user.roles.some(role => role.name.toLowerCase() === roleName.toLowerCase());\n}\n\n// Funkcja do sprawdzania czy użytkownik ma określone uprawnienie\nexport function hasPermission(permissionKey) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) return false;\n  \n  return user.roles.some(role => {\n    if (!role.permissions) return false;\n    return role.permissions[permissionKey] === true;\n  });\n}\n\n// Funkcja do inicjalizacji stanu autoryzacji\nexport async function initAuth() {\n  try {\n    // Sprawdź czy istnieje aktywna sesja\n    const { data: { session }, error } = await supabase.auth.getSession();\n    \n    if (error) throw error;\n    \n    if (session) {\n      // Jeśli sesja istnieje, ale nie ma danych użytkownika w localStorage, pobierz je\n      if (!localStorage.getItem('user')) {\n        const { data: { user } } = await supabase.auth.getUser();\n        \n        // Pobierz rolę użytkownika\n        const { data: userRoles, error: rolesError } = await supabase\n          .from('user_roles')\n          .select(`\n            role_id,\n            roles:role_id (\n              id,\n              name,\n              permissions\n            )\n          `)\n          .eq('user_id', user.id);\n\n        if (rolesError) throw rolesError;\n\n        // Pobierz profil użytkownika\n        const { data: profile, error: profileError } = await supabase\n          .from('user_profiles')\n          .select('*')\n          .eq('id', user.id)\n          .single();\n\n        if (profileError) throw profileError;\n\n        // Zapisz dane użytkownika w localStorage\n        const userData = {\n          id: user.id,\n          email: user.email,\n          firstName: profile.first_name,\n          lastName: profile.last_name,\n          company: profile.company,\n          avatarUrl: profile.avatar_url,\n          roles: userRoles.map(ur => ({\n            id: ur.roles.id,\n            name: ur.roles.name,\n            permissions: ur.roles.permissions\n          }))\n        };\n\n        localStorage.setItem('user', JSON.stringify(userData));\n        localStorage.setItem('session', JSON.stringify(session));\n      }\n      \n      return { loggedIn: true, user: getCurrentUser() };\n    } else {\n      // Jeśli nie ma sesji, wyczyść localStorage\n      localStorage.removeItem('user');\n      localStorage.removeItem('session');\n      return { loggedIn: false };\n    }\n  } catch (error) {\n    console.error('Błąd podczas inicjalizacji autoryzacji:', error);\n    return { loggedIn: false, error: error.message };\n  }\n}\n\n// Funkcja do aktualizacji profilu użytkownika\nexport async function updateUserProfile(userId, profileData) {\n  try {\n    const { error } = await supabase\n      .from('user_profiles')\n      .update({\n        first_name: profileData.firstName,\n        last_name: profileData.lastName,\n        company: profileData.company,\n        avatar_url: profileData.avatarUrl,\n        updated_at: new Date()\n      })\n      .eq('id', userId);\n\n    if (error) throw error;\n\n    // Aktualizuj dane w localStorage\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      const user = JSON.parse(userStr);\n      user.firstName = profileData.firstName;\n      user.lastName = profileData.lastName;\n      user.company = profileData.company;\n      user.avatarUrl = profileData.avatarUrl;\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error('Błąd podczas aktualizacji profilu:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Funkcja do pobierania wszystkich użytkowników (tylko dla administratorów)\nexport async function getAllUsers() {\n  try {\n    // Sprawdź czy użytkownik ma uprawnienia administratora\n    if (!hasRole('superadmin') && !hasRole('admin')) {\n      throw new Error('Brak uprawnień do pobierania listy użytkowników');\n    }\n\n    // Pobierz wszystkich użytkowników z ich profilami i rolami\n    const { data: profiles, error: profilesError } = await supabase\n      .from('user_profiles')\n      .select('*');\n\n    if (profilesError) throw profilesError;\n\n    // Pobierz role dla każdego użytkownika\n    const userIds = profiles.map(profile => profile.id);\n    const { data: userRoles, error: rolesError } = await supabase\n      .from('user_roles')\n      .select(`\n        user_id,\n        role_id,\n        roles:role_id (\n          id,\n          name,\n          permissions\n        )\n      `)\n      .in('user_id', userIds);\n\n    if (rolesError) throw rolesError;\n\n    // Połącz dane użytkowników z ich rolami\n    const users = profiles.map(profile => {\n      const roles = userRoles\n        .filter(ur => ur.user_id === profile.id)\n        .map(ur => ({\n          id: ur.roles.id,\n          name: ur.roles.name,\n          permissions: ur.roles.permissions\n        }));\n\n      return {\n        id: profile.id,\n        firstName: profile.first_name,\n        lastName: profile.last_name,\n        company: profile.company,\n        avatarUrl: profile.avatar_url,\n        createdAt: profile.created_at,\n        updatedAt: profile.updated_at,\n        roles\n      };\n    });\n\n    return { success: true, users };\n  } catch (error) {\n    console.error('Błąd podczas pobierania użytkowników:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Funkcja do usuwania użytkownika (tylko dla administratorów)\nexport async function deleteUser(userId) {\n  try {\n    // Sprawdź czy użytkownik ma uprawnienia administratora\n    if (!hasRole('superadmin') && !hasRole('admin')) {\n      throw new Error('Brak uprawnień do usuwania użytkowników');\n    }\n\n    // Usuń użytkownika z auth.users (kaskadowo usunie powiązane rekordy)\n    const { error } = await supabase.auth.admin.deleteUser(userId);\n\n    if (error) throw error;\n\n    return { success: true };\n  } catch (error) {\n    console.error('Błąd podczas usuwania użytkownika:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Funkcja do zmiany roli użytkownika (tylko dla administratorów)\nexport async function changeUserRole(userId, newRoleName) {\n  try {\n    // Sprawdź czy użytkownik ma uprawnienia administratora\n    if (!hasRole('superadmin') && !hasRole('admin')) {\n      throw new Error('Brak uprawnień do zmiany ról użytkowników');\n    }\n\n    // Pobierz ID nowej roli\n    const { data: roleData, error: roleError } = await supabase\n      .from('roles')\n      .select('id')\n      .eq('name', newRoleName.toLowerCase())\n      .single();\n\n    if (roleError) throw roleError;\n\n    // Usuń wszystkie istniejące role użytkownika\n    const { error: deleteError } = await supabase\n      .from('user_roles')\n      .delete()\n      .eq('user_id', userId);\n\n    if (deleteError) throw deleteError;\n\n    // Przypisz nową rolę\n    const { error: insertError } = await supabase\n      .from('user_roles')\n      .insert([\n        {\n          user_id: userId,\n          role_id: roleData.id\n        }\n      ]);\n\n    if (insertError) throw insertError;\n\n    return { success: true };\n  } catch (error) {\n    console.error('Błąd podczas zmiany roli użytkownika:', error);\n    return { success: false, error: error.message };\n  }\n}\n","import { loginUser } from './js/auth.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const button = document.querySelector('.neon-button');\n  const glowPoint = document.querySelector('.glow-point');\n  const loginForm = document.querySelector('.login-form');\n  const emailInput = document.getElementById('email');\n  const passwordInput = document.getElementById('password');\n  const emailGlowContainer = document.getElementById('email-glow');\n  const passwordGlowContainer = document.getElementById('password-glow');\n  \n  // Button dimensions and position\n  let buttonRect;\n  let centerX;\n  let centerY;\n  let angle = 0;\n  \n  // Animation variables\n  let animationId;\n  const speed = 0.01; // Speed of rotation\n  \n  function updateButtonMetrics() {\n    buttonRect = button.getBoundingClientRect();\n    centerX = buttonRect.width / 2;\n    centerY = buttonRect.height / 2;\n  }\n  \n  function createGlowTrail(x, y, container) {\n    const trail = document.createElement('div');\n    trail.classList.add('glow-blur');\n    trail.style.left = `${x}px`;\n    trail.style.top = `${y}px`;\n    trail.style.width = '10px';\n    trail.style.height = '10px';\n    trail.style.borderRadius = '50%';\n    trail.style.background = 'radial-gradient(circle, rgba(255, 255, 255, 0.8) 0%, rgba(255, 20, 147, 0.3) 70%, transparent 100%)';\n    trail.style.position = 'absolute';\n    trail.style.transform = 'translate(-50%, -50%)';\n    \n    container.appendChild(trail);\n    \n    // Animate and remove the trail\n    setTimeout(() => {\n      trail.style.opacity = '0';\n      trail.style.width = '25px';\n      trail.style.height = '25px';\n      setTimeout(() => {\n        trail.remove();\n      }, 300);\n    }, 10);\n  }\n  \n  function animateGlow() {\n    // Calculate position on the elliptical path\n    const ellipseX = centerX + (buttonRect.width / 2 - 10) * Math.cos(angle);\n    const ellipseY = centerY + (buttonRect.height / 2 - 10) * Math.sin(angle);\n    \n    // Position the glow point\n    glowPoint.style.left = `${ellipseX}px`;\n    glowPoint.style.top = `${ellipseY}px`;\n    glowPoint.style.opacity = '1';\n    \n    // Create trail effect\n    createGlowTrail(ellipseX, ellipseY, loginForm);\n    \n    // Increment angle for clockwise movement\n    angle += speed;\n    if (angle >= Math.PI * 2) {\n      angle = 0;\n    }\n    \n    animationId = requestAnimationFrame(animateGlow);\n  }\n  \n  function startAnimation() {\n    updateButtonMetrics();\n    if (animationId) {\n      cancelAnimationFrame(animationId);\n    }\n    animationId = requestAnimationFrame(animateGlow);\n  }\n  \n  // Initialize on load and resize\n  updateButtonMetrics();\n  window.addEventListener('resize', updateButtonMetrics);\n  \n  // Start animation immediately\n  startAnimation();\n  \n  // Enhance glow effect on hover\n  button.addEventListener('mouseenter', () => {\n    button.classList.add('hover-active');\n  });\n  \n  button.addEventListener('mouseleave', () => {\n    button.classList.remove('hover-active');\n  });\n  \n  // Add input focus effects\n  function addInputGlowEffect(input, container) {\n    input.addEventListener('focus', () => {\n      // Create a pulsing glow effect around the input\n      const inputRect = input.getBoundingClientRect();\n      const pulseGlow = document.createElement('div');\n      pulseGlow.classList.add('input-glow-effect');\n      pulseGlow.style.position = 'absolute';\n      pulseGlow.style.top = '0';\n      pulseGlow.style.left = '0';\n      pulseGlow.style.width = '100%';\n      pulseGlow.style.height = '100%';\n      pulseGlow.style.borderRadius = '12px';\n      pulseGlow.style.boxShadow = '0 0 15px rgba(138, 43, 226, 0.5), 0 0 30px rgba(255, 20, 147, 0.3)';\n      pulseGlow.style.opacity = '0';\n      pulseGlow.style.animation = 'pulse-glow 2s infinite';\n      \n      container.appendChild(pulseGlow);\n      \n      // Add keyframes for the pulse animation\n      if (!document.querySelector('#pulse-glow-keyframes')) {\n        const style = document.createElement('style');\n        style.id = 'pulse-glow-keyframes';\n        style.textContent = `\n          @keyframes pulse-glow {\n            0% { opacity: 0.3; }\n            50% { opacity: 0.7; }\n            100% { opacity: 0.3; }\n          }\n        `;\n        document.head.appendChild(style);\n      }\n    });\n    \n    input.addEventListener('blur', () => {\n      // Remove the glow effect\n      const glowEffect = container.querySelector('.input-glow-effect');\n      if (glowEffect) {\n        glowEffect.remove();\n      }\n    });\n  }\n  \n  addInputGlowEffect(emailInput, emailGlowContainer);\n  addInputGlowEffect(passwordInput, passwordGlowContainer);\n  \n  // Dodanie komunikatu o błędzie\n  function showErrorMessage(message) {\n    // Usuń istniejący komunikat o błędzie, jeśli istnieje\n    const existingError = document.querySelector('.error-message');\n    if (existingError) {\n      existingError.remove();\n    }\n    \n    // Utwórz nowy komunikat o błędzie\n    const errorMessage = document.createElement('div');\n    errorMessage.classList.add('error-message');\n    errorMessage.textContent = message;\n    errorMessage.style.color = '#f44336';\n    errorMessage.style.fontSize = '14px';\n    errorMessage.style.marginTop = '10px';\n    errorMessage.style.textAlign = 'center';\n    errorMessage.style.animation = 'fadeIn 0.3s';\n    \n    // Dodaj keyframes dla animacji\n    if (!document.querySelector('#error-keyframes')) {\n      const style = document.createElement('style');\n      style.id = 'error-keyframes';\n      style.textContent = `\n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(-10px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    // Dodaj komunikat o błędzie do formularza\n    loginForm.appendChild(errorMessage);\n  }\n  \n  // Form submission\n  loginForm.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    \n    const email = emailInput.value.trim();\n    const password = passwordInput.value.trim();\n    \n    // Zmiana tekstu przycisku\n    button.textContent = 'Logowanie...';\n    button.disabled = true;\n    \n    try {\n      // Logowanie użytkownika przez Supabase\n      const result = await loginUser(email, password);\n      \n      if (result.success) {\n        // Poprawne dane logowania\n        button.textContent = 'Sukces!';\n        button.style.background = 'linear-gradient(90deg, rgba(138, 43, 226, 0.8), rgba(255, 20, 147, 0.8))';\n        \n        // Przekierowanie do dashboardu po udanym logowaniu\n        setTimeout(() => {\n          window.location.href = 'dashboard.html';\n        }, 1000);\n      } else {\n        // Niepoprawne dane logowania\n        showErrorMessage('Niepoprawny email lub hasło. Spróbuj ponownie.');\n        button.classList.add('error');\n        button.textContent = 'Zaloguj się';\n        button.disabled = false;\n        \n        // Usuń klasę błędu po chwili\n        setTimeout(() => {\n          button.classList.remove('error');\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Błąd logowania:', error);\n      showErrorMessage('Wystąpił błąd podczas logowania. Spróbuj ponownie później.');\n      button.textContent = 'Zaloguj się';\n      button.disabled = false;\n    }\n  });\n  \n  // Theme toggle functionality\n  const themeToggle = document.querySelector('.theme-toggle');\n  const toggleIcon = document.querySelector('.toggle-icon');\n  \n  // Check for saved theme preference\n  const savedTheme = localStorage.getItem('theme');\n  if (savedTheme === 'light') {\n    document.body.classList.add('light-mode');\n    toggleIcon.textContent = '☀️';\n  }\n  \n  themeToggle.addEventListener('click', () => {\n    document.body.classList.toggle('light-mode');\n    \n    if (document.body.classList.contains('light-mode')) {\n      toggleIcon.textContent = '☀️';\n      localStorage.setItem('theme', 'light');\n    } else {\n      toggleIcon.textContent = '🌙';\n      localStorage.setItem('theme', 'dark');\n    }\n  });\n});\n\n// Add subtle parallax effect to the background\ndocument.addEventListener('mousemove', (e) => {\n  const moveX = (e.clientX - window.innerWidth / 2) * 0.01;\n  const moveY = (e.clientY - window.innerHeight / 2) * 0.01;\n  \n  document.body.style.backgroundPosition = `${moveX}px ${moveY}px`;\n});\n"],"names":["supabaseUrl","supabaseAnonKey","supabase","createClient","loginUser","email","password","data","error","userRoles","rolesError","profile","profileError","userData","ur","button","glowPoint","loginForm","emailInput","passwordInput","emailGlowContainer","passwordGlowContainer","buttonRect","centerX","centerY","angle","animationId","speed","updateButtonMetrics","createGlowTrail","x","y","container","trail","animateGlow","ellipseX","ellipseY","startAnimation","addInputGlowEffect","input","pulseGlow","style","glowEffect","showErrorMessage","message","existingError","errorMessage","e","themeToggle","toggleIcon","moveX","moveY"],"mappings":"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"}
